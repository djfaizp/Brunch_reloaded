diff -ruN a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
--- a/drivers/mmc/core/core.c	2020-01-10 19:22:37.000000000 +0100
+++ b/drivers/mmc/core/core.c	2020-01-27 14:51:23.000000000 +0100
@@ -2544,11 +2538,6 @@
 	if (!host->card || mmc_card_removed(host->card))
 		return 1;
 
-	if (host->trigger_replug_state == MMC_REPLUG_STATE_UNPLUG) {
-		mmc_card_set_removed(host->card);
-		return 1;
-	}
-
 	ret = host->bus_ops->alive(host);
 
 	/*
@@ -2661,21 +2650,8 @@
 	mmc_bus_put(host);
 
 	mmc_claim_host(host);
-
-	/*
-	 * Move through the state machine if we're triggering an unplug
-	 * followed by a re-plug.
-	 */
-	if (host->trigger_replug_state == MMC_REPLUG_STATE_UNPLUG) {
-		host->trigger_replug_state = MMC_REPLUG_STATE_PLUG;
-		_mmc_detect_change(host, 0, false);
-	} else if (host->trigger_replug_state == MMC_REPLUG_STATE_PLUG) {
-		host->trigger_replug_state = MMC_REPLUG_STATE_NONE;
-	}
-
-	if (host->trigger_replug_state == MMC_REPLUG_STATE_PLUG ||
-	    (mmc_card_is_removable(host) && host->ops->get_cd &&
-			host->ops->get_cd(host) == 0)) {
+	if (mmc_card_is_removable(host) && host->ops->get_cd &&
+			host->ops->get_cd(host) == 0) {
 		mmc_power_off(host);
 		mmc_release_host(host);
 		goto out;
diff -ruN a/drivers/mmc/core/sdio.c b/drivers/mmc/core/sdio.c
--- a/drivers/mmc/core/sdio.c	2020-01-10 19:22:38.000000000 +0100
+++ b/drivers/mmc/core/sdio.c	2020-01-27 14:51:23.000000000 +0100
@@ -817,23 +817,6 @@
 {
 	int ret;
 
-	/*
-	 * Reset the card by performing the same steps that are taken by
-	 * mmc_rescan_try_freq() and mmc_attach_sdio() during a "normal" probe.
-	 *
-	 * sdio_reset() is technically not needed. Having just powered up the
-	 * hardware, it should already be in reset state. However, some
-	 * platforms (such as SD8686 on OLPC) do not instantly cut power,
-	 * meaning that a reset is required when restoring power soon after
-	 * powering off. It is harmless in other cases.
-	 *
-	 * The CMD5 reset (mmc_send_io_op_cond()), according to the SDIO spec,
-	 * is not necessary for non-removable cards. However, it is required
-	 * for OLPC SD8686 (which expects a [CMD5,5,3,7] init sequence), and
-	 * harmless in other situations.
-	 *
-	 */
-
 	sdio_reset(host);
 	mmc_go_idle(host);
 	mmc_send_if_cond(host, host->card->ocr);
@@ -951,8 +934,6 @@
  */
 static int mmc_sdio_suspend(struct mmc_host *host)
 {
-	WARN_ON(host->sdio_irqs && !mmc_card_keep_power(host));
-
 	/* Prevent processing of SDIO IRQs in suspended state. */
 	mmc_card_set_suspended(host->card);
 	cancel_delayed_work_sync(&host->sdio_irq_work);
@@ -1015,7 +996,7 @@
 		if (!(host->caps2 & MMC_CAP2_SDIO_IRQ_NOTHREAD))
 			wake_up_process(host->sdio_irq_thread);
 		else if (host->caps & MMC_CAP_SDIO_IRQ)
-			queue_delayed_work(system_wq, &host->sdio_irq_work, 0);
+			host->ops->enable_sdio_irq(host, 1);
 	}
 
 out:
@@ -1027,7 +1008,34 @@
 
 static int mmc_sdio_power_restore(struct mmc_host *host)
 {
-	return mmc_sdio_reinit_card(host, 0);
+	int ret;
+
+	/*
+	 * Reset the card by performing the same steps that are taken by
+	 * mmc_rescan_try_freq() and mmc_attach_sdio() during a "normal" probe.
+	 *
+	 * sdio_reset() is technically not needed. Having just powered up the
+	 * hardware, it should already be in reset state. However, some
+	 * platforms (such as SD8686 on OLPC) do not instantly cut power,
+	 * meaning that a reset is required when restoring power soon after
+	 * powering off. It is harmless in other cases.
+	 *
+	 * The CMD5 reset (mmc_send_io_op_cond()), according to the SDIO spec,
+	 * is not necessary for non-removable cards. However, it is required
+	 * for OLPC SD8686 (which expects a [CMD5,5,3,7] init sequence), and
+	 * harmless in other situations.
+	 *
+	 */
+
+	mmc_claim_host(host);
+
+	ret = mmc_sdio_reinit_card(host, mmc_card_keep_power(host));
+	if (!ret && host->sdio_irqs)
+		mmc_signal_sdio_irq(host);
+
+	mmc_release_host(host);
+
+	return ret;
 }
 
 static int mmc_sdio_runtime_suspend(struct mmc_host *host)
diff -ruN a/drivers/mmc/core/sdio_irq.c b/drivers/mmc/core/sdio_irq.c
--- a/drivers/mmc/core/sdio_irq.c	2020-01-10 19:22:38.000000000 +0100
+++ b/drivers/mmc/core/sdio_irq.c	2020-01-27 14:51:23.000000000 +0100
@@ -31,34 +31,6 @@
 #include "core.h"
 #include "card.h"
 
-static int sdio_get_pending_irqs(struct mmc_host *host, u8 *pending)
-{
-	struct mmc_card *card = host->card;
-	int ret;
-
-	WARN_ON(!host->claimed);
-
-	ret = mmc_io_rw_direct(card, 0, 0, SDIO_CCCR_INTx, 0, pending);
-	if (ret) {
-		pr_debug("%s: error %d reading SDIO_CCCR_INTx\n",
-		       mmc_card_id(card), ret);
-		return ret;
-	}
-
-	if (*pending && mmc_card_broken_irq_polling(card) &&
-	    !(host->caps & MMC_CAP_SDIO_IRQ)) {
-		unsigned char dummy;
-
-		/* A fake interrupt could be created when we poll SDIO_CCCR_INTx
-		 * register with a Marvell SD8797 card. A dummy CMD52 read to
-		 * function 0 register 0xff can avoid this.
-		 */
-		mmc_io_rw_direct(card, 0, 0, 0xff, 0, &dummy);
-	}
-
-	return 0;
-}
-
 static int process_sdio_pending_irqs(struct mmc_host *host)
 {
 	struct mmc_card *card = host->card;
@@ -85,9 +57,23 @@
 		return 1;
 	}
 
-	ret = sdio_get_pending_irqs(host, &pending);
-	if (ret)
+	ret = mmc_io_rw_direct(card, 0, 0, SDIO_CCCR_INTx, 0, &pending);
+	if (ret) {
+		pr_debug("%s: error %d reading SDIO_CCCR_INTx\n",
+		       mmc_card_id(card), ret);
 		return ret;
+	}
+
+	if (pending && mmc_card_broken_irq_polling(card) &&
+	    !(host->caps & MMC_CAP_SDIO_IRQ)) {
+		unsigned char dummy;
+
+		/* A fake interrupt could be created when we poll SDIO_CCCR_INTx
+		 * register with a Marvell SD8797 card. A dummy CMD52 read to
+		 * function 0 register 0xff can avoid this.
+		 */
+		mmc_io_rw_direct(card, 0, 0, 0xff, 0, &dummy);
+	}
 
 	count = 0;
 	for (i = 1; i <= 7; i++) {
@@ -119,7 +105,7 @@
 	mmc_claim_host(host);
 	if (host->sdio_irqs) {
 		process_sdio_pending_irqs(host);
-		if (!host->sdio_irq_pending)
+		if (host->ops->ack_sdio_irq)
 			host->ops->ack_sdio_irq(host);
 	}
 	mmc_release_host(host);
